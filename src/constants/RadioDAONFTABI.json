{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nelContract",
          "type": "address"
        },
        {
          "internalType": "string[16]",
          "name": "tokenURIs",
          "type": "string[16]"
        },
        {
          "internalType": "uint256",
          "name": "marketplaceFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialised",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "MarketItemBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "MarketItemDelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "MarketItemListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "NFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "NFTTokenURISet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NEL_CONTRACT",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "_updateNELContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "buyNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "delistNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllNFTsForSale",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "forSale",
              "type": "bool"
            }
          ],
          "internalType": "struct RadioDAONFT.MarketItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitialisedFlag",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketplaceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyNFTs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_marketItems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "forSale",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_marketplaceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "sellNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMarketplaceFee",
          "type": "uint256"
        }
      ],
      "name": "updateMarketplaceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
  "receipt": {
    "to": null,
    "from": "0xcDA1048cf97B65ED9fb852AE677F02a28bd09ad3",
    "contractAddress": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
    "transactionIndex": 34,
    "gasUsed": "9636941",
    "logsBloom": "0x04000000000000000040044000000000000002000000000000800008000000000000000020000200000000000000000000001000460c80000020020000a40000000030000000000800000008100000000003000001040000000000000002000008000000020000000000000000000800000000000000000000000010000000400080000400000800010000000000005088001800000000000000000000000000000000000000000000000100000000000000000000800020002000080000400040000002020000000000000000000002002000008000000000000100000060220000000200800000000000000000000000000000008000440000000000800000",
    "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a",
    "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cda1048cf97b65ed9fb852ae677f02a28bd09ad3"
        ],
        "data": "0x",
        "logIndex": 75,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1ea022c87f1125464460ba841e3bdd44f22109f",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 76,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0x4cc0a9c4a99ddc700de1af2c9f916a7cbfdb71f14801ccff94061ad1ef8a8040",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000cda1048cf97b65ed9fb852ae677f02a28bd09ad3",
        "logIndex": 77,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xf4f6c880a7b6d9025113f9615cc77c5dfd3a7e365a369c6f50469d34b8f68f90",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d5a77707577737164536476565159584e536e313439776b5463513361694658597235543731544c44715537480000000000000000000000",
        "logIndex": 78,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1ea022c87f1125464460ba841e3bdd44f22109f",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 79,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0x4cc0a9c4a99ddc700de1af2c9f916a7cbfdb71f14801ccff94061ad1ef8a8040",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x000000000000000000000000cda1048cf97b65ed9fb852ae677f02a28bd09ad3",
        "logIndex": 80,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xf4f6c880a7b6d9025113f9615cc77c5dfd3a7e365a369c6f50469d34b8f68f90",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d51564a69386173424b456d6e46477a67757a564e3669327577396e415743427455707341796e4671727150430000000000000000000000",
        "logIndex": 81,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1ea022c87f1125464460ba841e3bdd44f22109f",
          "0x0000000000000000000000000000000000000000000000000000000000000002"
        ],
        "data": "0x",
        "logIndex": 82,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0x4cc0a9c4a99ddc700de1af2c9f916a7cbfdb71f14801ccff94061ad1ef8a8040",
          "0x0000000000000000000000000000000000000000000000000000000000000002"
        ],
        "data": "0x000000000000000000000000cda1048cf97b65ed9fb852ae677f02a28bd09ad3",
        "logIndex": 83,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xf4f6c880a7b6d9025113f9615cc77c5dfd3a7e365a369c6f50469d34b8f68f90",
          "0x0000000000000000000000000000000000000000000000000000000000000002"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d5a7038626b683252395078394d5a72567a68574569504158533243756e45444c42757a6570595567663656550000000000000000000000",
        "logIndex": 84,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1ea022c87f1125464460ba841e3bdd44f22109f",
          "0x0000000000000000000000000000000000000000000000000000000000000003"
        ],
        "data": "0x",
        "logIndex": 85,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0x4cc0a9c4a99ddc700de1af2c9f916a7cbfdb71f14801ccff94061ad1ef8a8040",
          "0x0000000000000000000000000000000000000000000000000000000000000003"
        ],
        "data": "0x000000000000000000000000cda1048cf97b65ed9fb852ae677f02a28bd09ad3",
        "logIndex": 86,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xf4f6c880a7b6d9025113f9615cc77c5dfd3a7e365a369c6f50469d34b8f68f90",
          "0x0000000000000000000000000000000000000000000000000000000000000003"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d56573255516b454d46477776573768456b6e705a3764563931724d544c68324555595436335558573670396b0000000000000000000000",
        "logIndex": 87,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1ea022c87f1125464460ba841e3bdd44f22109f",
          "0x0000000000000000000000000000000000000000000000000000000000000004"
        ],
        "data": "0x",
        "logIndex": 88,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0x4cc0a9c4a99ddc700de1af2c9f916a7cbfdb71f14801ccff94061ad1ef8a8040",
          "0x0000000000000000000000000000000000000000000000000000000000000004"
        ],
        "data": "0x000000000000000000000000cda1048cf97b65ed9fb852ae677f02a28bd09ad3",
        "logIndex": 89,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xf4f6c880a7b6d9025113f9615cc77c5dfd3a7e365a369c6f50469d34b8f68f90",
          "0x0000000000000000000000000000000000000000000000000000000000000004"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d584e726d6d465757394e78686367534744374b644e52785a704c744e71433976756b636d686b577036714d790000000000000000000000",
        "logIndex": 90,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1ea022c87f1125464460ba841e3bdd44f22109f",
          "0x0000000000000000000000000000000000000000000000000000000000000005"
        ],
        "data": "0x",
        "logIndex": 91,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0x4cc0a9c4a99ddc700de1af2c9f916a7cbfdb71f14801ccff94061ad1ef8a8040",
          "0x0000000000000000000000000000000000000000000000000000000000000005"
        ],
        "data": "0x000000000000000000000000cda1048cf97b65ed9fb852ae677f02a28bd09ad3",
        "logIndex": 92,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xf4f6c880a7b6d9025113f9615cc77c5dfd3a7e365a369c6f50469d34b8f68f90",
          "0x0000000000000000000000000000000000000000000000000000000000000005"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d5135754b5048695a677033777865774c45547356517556674a4d5370667071505443417545504d645a3133630000000000000000000000",
        "logIndex": 93,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1ea022c87f1125464460ba841e3bdd44f22109f",
          "0x0000000000000000000000000000000000000000000000000000000000000006"
        ],
        "data": "0x",
        "logIndex": 94,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0x4cc0a9c4a99ddc700de1af2c9f916a7cbfdb71f14801ccff94061ad1ef8a8040",
          "0x0000000000000000000000000000000000000000000000000000000000000006"
        ],
        "data": "0x000000000000000000000000cda1048cf97b65ed9fb852ae677f02a28bd09ad3",
        "logIndex": 95,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xf4f6c880a7b6d9025113f9615cc77c5dfd3a7e365a369c6f50469d34b8f68f90",
          "0x0000000000000000000000000000000000000000000000000000000000000006"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d5a59656e6e62623143345546374c614439526d4361514d3946717373716e737a4c57586462676455383571560000000000000000000000",
        "logIndex": 96,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1ea022c87f1125464460ba841e3bdd44f22109f",
          "0x0000000000000000000000000000000000000000000000000000000000000007"
        ],
        "data": "0x",
        "logIndex": 97,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0x4cc0a9c4a99ddc700de1af2c9f916a7cbfdb71f14801ccff94061ad1ef8a8040",
          "0x0000000000000000000000000000000000000000000000000000000000000007"
        ],
        "data": "0x000000000000000000000000cda1048cf97b65ed9fb852ae677f02a28bd09ad3",
        "logIndex": 98,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xf4f6c880a7b6d9025113f9615cc77c5dfd3a7e365a369c6f50469d34b8f68f90",
          "0x0000000000000000000000000000000000000000000000000000000000000007"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d59524a535258347a7679714b76314b754648646755514c756d5456454e4b6375656e646a777577424a4642330000000000000000000000",
        "logIndex": 99,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1ea022c87f1125464460ba841e3bdd44f22109f",
          "0x0000000000000000000000000000000000000000000000000000000000000008"
        ],
        "data": "0x",
        "logIndex": 100,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0x4cc0a9c4a99ddc700de1af2c9f916a7cbfdb71f14801ccff94061ad1ef8a8040",
          "0x0000000000000000000000000000000000000000000000000000000000000008"
        ],
        "data": "0x000000000000000000000000cda1048cf97b65ed9fb852ae677f02a28bd09ad3",
        "logIndex": 101,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xf4f6c880a7b6d9025113f9615cc77c5dfd3a7e365a369c6f50469d34b8f68f90",
          "0x0000000000000000000000000000000000000000000000000000000000000008"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d554c744179564c65364a4868553332584a7479435961727646453663584d7270516b5a3846346d73703457770000000000000000000000",
        "logIndex": 102,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1ea022c87f1125464460ba841e3bdd44f22109f",
          "0x0000000000000000000000000000000000000000000000000000000000000009"
        ],
        "data": "0x",
        "logIndex": 103,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0x4cc0a9c4a99ddc700de1af2c9f916a7cbfdb71f14801ccff94061ad1ef8a8040",
          "0x0000000000000000000000000000000000000000000000000000000000000009"
        ],
        "data": "0x000000000000000000000000cda1048cf97b65ed9fb852ae677f02a28bd09ad3",
        "logIndex": 104,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xf4f6c880a7b6d9025113f9615cc77c5dfd3a7e365a369c6f50469d34b8f68f90",
          "0x0000000000000000000000000000000000000000000000000000000000000009"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d613771557874537147595877534a32614d4d665444644c696233435a5150696d67654b5132323450394167610000000000000000000000",
        "logIndex": 105,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1ea022c87f1125464460ba841e3bdd44f22109f",
          "0x000000000000000000000000000000000000000000000000000000000000000a"
        ],
        "data": "0x",
        "logIndex": 106,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0x4cc0a9c4a99ddc700de1af2c9f916a7cbfdb71f14801ccff94061ad1ef8a8040",
          "0x000000000000000000000000000000000000000000000000000000000000000a"
        ],
        "data": "0x000000000000000000000000cda1048cf97b65ed9fb852ae677f02a28bd09ad3",
        "logIndex": 107,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xf4f6c880a7b6d9025113f9615cc77c5dfd3a7e365a369c6f50469d34b8f68f90",
          "0x000000000000000000000000000000000000000000000000000000000000000a"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d59345942734770746d5646664278794854367a61576d546437784d517637784b4a6b385131724e376e5342350000000000000000000000",
        "logIndex": 108,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1ea022c87f1125464460ba841e3bdd44f22109f",
          "0x000000000000000000000000000000000000000000000000000000000000000b"
        ],
        "data": "0x",
        "logIndex": 109,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0x4cc0a9c4a99ddc700de1af2c9f916a7cbfdb71f14801ccff94061ad1ef8a8040",
          "0x000000000000000000000000000000000000000000000000000000000000000b"
        ],
        "data": "0x000000000000000000000000cda1048cf97b65ed9fb852ae677f02a28bd09ad3",
        "logIndex": 110,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xf4f6c880a7b6d9025113f9615cc77c5dfd3a7e365a369c6f50469d34b8f68f90",
          "0x000000000000000000000000000000000000000000000000000000000000000b"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d6572634458626e33704e33325873664a7375595352774d415a387470337a6e5a653874475450746a765051330000000000000000000000",
        "logIndex": 111,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1ea022c87f1125464460ba841e3bdd44f22109f",
          "0x000000000000000000000000000000000000000000000000000000000000000c"
        ],
        "data": "0x",
        "logIndex": 112,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0x4cc0a9c4a99ddc700de1af2c9f916a7cbfdb71f14801ccff94061ad1ef8a8040",
          "0x000000000000000000000000000000000000000000000000000000000000000c"
        ],
        "data": "0x000000000000000000000000cda1048cf97b65ed9fb852ae677f02a28bd09ad3",
        "logIndex": 113,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xf4f6c880a7b6d9025113f9615cc77c5dfd3a7e365a369c6f50469d34b8f68f90",
          "0x000000000000000000000000000000000000000000000000000000000000000c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d50766d584b6141354a45396562726a73596a343955664b57795552794459446d724d656b4b697933746753360000000000000000000000",
        "logIndex": 114,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1ea022c87f1125464460ba841e3bdd44f22109f",
          "0x000000000000000000000000000000000000000000000000000000000000000d"
        ],
        "data": "0x",
        "logIndex": 115,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0x4cc0a9c4a99ddc700de1af2c9f916a7cbfdb71f14801ccff94061ad1ef8a8040",
          "0x000000000000000000000000000000000000000000000000000000000000000d"
        ],
        "data": "0x000000000000000000000000cda1048cf97b65ed9fb852ae677f02a28bd09ad3",
        "logIndex": 116,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xf4f6c880a7b6d9025113f9615cc77c5dfd3a7e365a369c6f50469d34b8f68f90",
          "0x000000000000000000000000000000000000000000000000000000000000000d"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d57657a3277614374716b7156357546564759644154754b585253656f786d636d4a5568574e427a68487a75720000000000000000000000",
        "logIndex": 117,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1ea022c87f1125464460ba841e3bdd44f22109f",
          "0x000000000000000000000000000000000000000000000000000000000000000e"
        ],
        "data": "0x",
        "logIndex": 118,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0x4cc0a9c4a99ddc700de1af2c9f916a7cbfdb71f14801ccff94061ad1ef8a8040",
          "0x000000000000000000000000000000000000000000000000000000000000000e"
        ],
        "data": "0x000000000000000000000000cda1048cf97b65ed9fb852ae677f02a28bd09ad3",
        "logIndex": 119,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xf4f6c880a7b6d9025113f9615cc77c5dfd3a7e365a369c6f50469d34b8f68f90",
          "0x000000000000000000000000000000000000000000000000000000000000000e"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d6274576b4e4e32653353634146415251454145775a5355576471624d3568594c5636586756695a73454258510000000000000000000000",
        "logIndex": 120,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1ea022c87f1125464460ba841e3bdd44f22109f",
          "0x000000000000000000000000000000000000000000000000000000000000000f"
        ],
        "data": "0x",
        "logIndex": 121,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0x4cc0a9c4a99ddc700de1af2c9f916a7cbfdb71f14801ccff94061ad1ef8a8040",
          "0x000000000000000000000000000000000000000000000000000000000000000f"
        ],
        "data": "0x000000000000000000000000cda1048cf97b65ed9fb852ae677f02a28bd09ad3",
        "logIndex": 122,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7685024,
        "transactionHash": "0x8fa66436a81b615bba02a3c971d8e175dc3cde647afe66ccd89dedd43fa1fca4",
        "address": "0xB1Ea022C87f1125464460ba841e3bdD44F22109f",
        "topics": [
          "0xf4f6c880a7b6d9025113f9615cc77c5dfd3a7e365a369c6f50469d34b8f68f90",
          "0x000000000000000000000000000000000000000000000000000000000000000f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d523550337458447663666d44617a566a424270766d326d46706e45744b3468467a4869684e736552663466760000000000000000000000",
        "logIndex": 123,
        "blockHash": "0x186609ae3678cc17f61bb445d4c83f2bb649b99fe675b90f65aa73ca06da715a"
      }
    ],
    "blockNumber": 7685024,
    "cumulativeGasUsed": "19345269",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE53142A32Fc68abb0f56247021f4eb0396d654aE",
    [
      "ipfs://QmZwpuwsqdSdvVQYXNSn149wkTcQ3aiFXYr5T71TLDqU7H",
      "ipfs://QmQVJi8asBKEmnFGzguzVN6i2uw9nAWCBtUpsAynFqrqPC",
      "ipfs://QmZp8bkh2R9Px9MZrVzhWEiPAXS2CunEDLBuzepYUgf6VU",
      "ipfs://QmVW2UQkEMFGwvW7hEknpZ7dV91rMTLh2EUYT63UXW6p9k",
      "ipfs://QmXNrmmFWW9NxhcgSGD7KdNRxZpLtNqC9vukcmhkWp6qMy",
      "ipfs://QmQ5uKPHiZgp3wxewLETsVQuVgJMSpfpqPTCAuEPMdZ13c",
      "ipfs://QmZYennbb1C4UF7LaD9RmCaQM9FqssqnszLWXdbgdU85qV",
      "ipfs://QmYRJSRX4zvyqKv1KuFHdgUQLumTVENKcuendjwuwBJFB3",
      "ipfs://QmULtAyVLe6JHhU32XJtyCYarvFE6cXMrpQkZ8F4msp4Ww",
      "ipfs://Qma7qUxtSqGYXwSJ2aMMfTDdLib3CZQPimgeKQ224P9Aga",
      "ipfs://QmY4YBsGptmVFfBxyHT6zaWmTd7xMQv7xKJk8Q1rN7nSB5",
      "ipfs://QmercDXbn3pN32XsfJsuYSRwMAZ8tp3znZe8tGTPtjvPQ3",
      "ipfs://QmPvmXKaA5JE9ebrjsYj49UfKWyURyDYDmrMekKiy3tgS6",
      "ipfs://QmWez2waCtqkqV5uFVGYdATuKXRSeoxmcmJUhWNBzhHzur",
      "ipfs://QmbtWkNN2e3ScAFARQEAEwZSUWdqbM5hYLV6XgViZsEBXQ",
      "ipfs://QmR5P3tXDvcfmDazVjBBpvm2mFpnEtK4hFzHihNseRf4fv"
    ],
    "500000000000000000"
  ],
  "numDeployments": 3,
  "solcInputHash": "6c62361ddf1728b7f172ec99ee08b1e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nelContract\",\"type\":\"address\"},{\"internalType\":\"string[16]\",\"name\":\"tokenURIs\",\"type\":\"string[16]\"},{\"internalType\":\"uint256\",\"name\":\"marketplaceFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialised\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"MarketItemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"MarketItemDelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"MarketItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"NFTTokenURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NEL_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"_updateNELContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"buyNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"delistNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllNFTsForSale\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"forSale\",\"type\":\"bool\"}],\"internalType\":\"struct RadioDAONFT.MarketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitialisedFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketplaceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyNFTs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_marketItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"forSale\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_marketplaceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"sellNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketplaceFee\",\"type\":\"uint256\"}],\"name\":\"updateMarketplaceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RadioDAONFT.sol\":\"RadioDAONFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any (single) token transfer. This includes minting and burning.\\n     * See {_beforeConsecutiveTokenTransfer}.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any (single) transfer of tokens. This includes minting and burning.\\n     * See {_afterConsecutiveTokenTransfer}.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called before consecutive token transfers.\\n     * Calling conditions are similar to {_beforeTokenTransfer}.\\n     *\\n     * The default implementation include balances updates that extensions such as {ERC721Consecutive} cannot perform\\n     * directly.\\n     */\\n    function _beforeConsecutiveTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /*first*/\\n        uint96 size\\n    ) internal virtual {\\n        if (from != address(0)) {\\n            _balances[from] -= size;\\n        }\\n        if (to != address(0)) {\\n            _balances[to] += size;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after consecutive token transfers.\\n     * Calling conditions are similar to {_afterTokenTransfer}.\\n     */\\n    function _afterConsecutiveTokenTransfer(\\n        address, /*from*/\\n        address, /*to*/\\n        uint256, /*first*/\\n        uint96 /*size*/\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x3e266133b3e0c5467be3b32fe1209e328d0a76d20fa0a8f51a42750ee311cb47\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed92e1ac2e70d4f62c1dbbe744a836836655f2620a73cf620fa5e9a0faacdd5d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and 'to' cannot be the zero address at the same time.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any batch token transfer. For now this is limited\\n     * to batch minting by the {ERC721Consecutive} extension.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeConsecutiveTokenTransfer(\\n        address,\\n        address,\\n        uint256,\\n        uint96 size\\n    ) internal virtual override {\\n        // We revert because enumerability is not supported with consecutive batch minting.\\n        // This conditional is only needed to silence spurious warnings about unreachable code.\\n        if (size > 0) {\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x58b07ac1a0d111e994a28604ef4766c79f8b08d57f133824199e025418999550\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x00a52ed7a22e00736be86073cfaf7ade4b6e6d3e50165435139225daf7c2f284\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x80585acee29868ec9adf36c50a55e8bbf73345c4a2c8e3a5e7ef5b35acd450cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3bb3b1d1326c36513682f214a6fe455732e9cd293787e035a714427fe4079b91\",\"license\":\"MIT\"},\"contracts/RadioDAONFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\n\\nerror AlreadyInitialised();\\n\\ncontract RadioDAONFT is ERC721Enumerable, ERC721URIStorage, Ownable {\\n    // NEL Variables\\n    IERC20 public NEL_CONTRACT;\\n\\n    // NFT Variables\\n    bool private s_isInitialised;\\n\\n    uint256 public constant MAX_TOKENS = 16;\\n    uint256 private s_tokenCounter;\\n    string[] internal s_tokenURIs;\\n\\n    // Marketplace Variables\\n    struct MarketItem {\\n        uint256 tokenID;\\n        address payable seller;\\n        uint256 price;\\n        bool forSale;\\n    }\\n\\n    MarketItem[] public s_marketItems;\\n    uint256 public s_marketplaceFee; // in NEL\\n\\n    // NFT Events\\n    event NFTMinted(address minter, uint256 indexed tokenID);\\n    event NFTTokenURISet(uint256 indexed tokenID, string tokenURI);\\n\\n    // Marketplace Events\\n    event MarketItemBought(\\n        uint256 indexed tokenID,\\n        address indexed seller,\\n        address indexed buyer,\\n        uint256 price\\n    );\\n    event MarketItemListed(\\n        uint256 indexed tokenID,\\n        address indexed seller,\\n        uint256 price\\n    );\\n    event MarketItemDelisted(uint256 indexed tokenID, address indexed seller);\\n\\n    constructor(\\n        address nelContract,\\n        string[MAX_TOKENS] memory tokenURIs,\\n        uint256 marketplaceFee\\n    ) ERC721(\\\"RadioDAONFT\\\", \\\"RDIONFT\\\") {\\n        _initialiseContract(nelContract, tokenURIs, marketplaceFee);\\n    }\\n\\n    // Constructor Helpers //\\n    function _initialiseContract(\\n        address nelContract,\\n        string[MAX_TOKENS] memory tokenURIs,\\n        uint256 marketplaceFee\\n    ) private {\\n        if (s_isInitialised) {\\n            revert AlreadyInitialised();\\n        }\\n\\n        NEL_CONTRACT = IERC20(nelContract);\\n\\n        s_tokenCounter = 0;\\n        s_tokenURIs = tokenURIs;\\n        s_isInitialised = true;\\n\\n        s_marketplaceFee = marketplaceFee;\\n\\n        _mintAllNFTs();\\n    }\\n\\n    function _mintAllNFTs() private {\\n        for (uint256 i = 0; i < MAX_TOKENS; i++) {\\n            address minter = msg.sender;\\n            uint256 newTokenID = s_tokenCounter;\\n\\n            // mint process\\n            _safeMint(address(this), newTokenID);\\n            s_tokenCounter += 1;\\n            emit NFTMinted(minter, newTokenID);\\n\\n            // tokenURI setting process\\n            string memory newTokenURI = s_tokenURIs[newTokenID];\\n            _setTokenURI(newTokenID, newTokenURI);\\n            emit NFTTokenURISet(newTokenID, newTokenURI);\\n\\n            // after an NFT is minted, list it for sale\\n            MarketItem memory newItem;\\n            newItem.tokenID = newTokenID;\\n            newItem.seller = payable(minter);\\n            newItem.price = 1_000_000_000_000_000_000; // 1 NEL = 10^18 NELwei\\n            newItem.forSale = true;\\n\\n            s_marketItems.push(newItem);\\n        }\\n    }\\n\\n    //\\n\\n    // NEL Contract Address Updater\\n    function _updateNELContractAddress(address newAddress) external onlyOwner {\\n        NEL_CONTRACT = IERC20(newAddress);\\n    }\\n\\n    //\\n\\n    // Overrided functions to support both ERC721Enumerable & ERC721URIStorage extensions\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721Enumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function _beforeConsecutiveTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint96 size\\n    ) internal virtual override(ERC721, ERC721Enumerable) {\\n        super._beforeConsecutiveTokenTransfer(from, to, tokenId, size);\\n    }\\n\\n    function _burn(uint256 tokenId)\\n        internal\\n        override(ERC721, ERC721URIStorage)\\n    {\\n        super._burn(tokenId);\\n    }\\n\\n    //\\n\\n    // ERC721 Variable Getters //\\n    function getInitialisedFlag() public view returns (bool) {\\n        return s_isInitialised;\\n    }\\n\\n    function getTokenCounter() public view returns (uint256) {\\n        return s_tokenCounter;\\n    }\\n\\n    function getTokenURI(uint256 index) public view returns (string memory) {\\n        require(\\n            index >= 0 && index <= 15,\\n            \\\"Requested token URI index not within bounds.\\\"\\n        );\\n\\n        return s_tokenURIs[index];\\n    }\\n\\n    //\\n\\n    // Marketplace Variable Getters\\n    function getMarketplaceFee() public view returns (uint256) {\\n        return s_marketplaceFee;\\n    }\\n\\n    //\\n\\n    // Minting //\\n    // only allower owner of the contract to mint -- we'll pre-mint all the\\n    //  NFTs and then list for sale on the marketplace\\n\\n    //\\n\\n    // User Collection Functions //\\n    function getMyNFTs() external view returns (uint256[] memory) {\\n        uint256 myNFTCount = balanceOf(msg.sender);\\n        uint256[] memory ownedNFTs = new uint256[](myNFTCount);\\n\\n        for (uint256 i = 0; i < myNFTCount; i++) {\\n            ownedNFTs[i] = tokenOfOwnerByIndex(msg.sender, i);\\n        }\\n\\n        return ownedNFTs;\\n    }\\n\\n    //\\n\\n    // Marketplace Functions //\\n    function updateMarketplaceFee(uint256 newMarketplaceFee)\\n        external\\n        onlyOwner\\n    {\\n        s_marketplaceFee = newMarketplaceFee;\\n    }\\n\\n    function buyNFT(uint256 tokenID) external payable {\\n        uint256 buyPrice = s_marketItems[tokenID].price;\\n        address seller = s_marketItems[tokenID].seller;\\n\\n        // validation checks\\n        require(\\n            msg.sender != seller,\\n            \\\"You cannot purchase the NFT that you already owned and have listed. Instead, delist the NFT from the marketplace.\\\"\\n        );\\n        // require(\\n        //     msg.value == buyPrice,\\n        //     \\\"You either sent too little or too much ETH. Please send the asking price to complete the transaction.\\\"\\n        // );\\n        require(\\n            s_marketItems[tokenID].forSale,\\n            \\\"This item is not for sale. How did you manage to try and purchase it?\\\"\\n        );\\n\\n        // use the bool in the MarketItem to effectively delist the item from sale\\n        s_marketItems[tokenID].forSale = false;\\n\\n        // front-end will approve spending of buyPrice NEL tokens\\n\\n        // complete the purchase transaction\\n        _transfer(address(this), msg.sender, tokenID);\\n        NEL_CONTRACT.transferFrom(msg.sender, seller, buyPrice);\\n        emit MarketItemBought(tokenID, seller, msg.sender, buyPrice);\\n    }\\n\\n    function sellNFT(uint256 tokenID, uint256 salePrice) external payable {\\n        // require(\\n        //     msg.value == s_marketplaceFee,\\n        //     \\\"A fee must be paid to the marketplace to list your NFT. This fee must be exactly the marketplace fee.\\\"\\n        // );\\n        require(\\n            salePrice > 0,\\n            \\\"You cannot list your NFT for a price less than zero. Please set a price greater than zero.\\\"\\n        );\\n\\n        // list the item for sale, with updated sale parameters\\n        s_marketItems[tokenID].price = salePrice;\\n        s_marketItems[tokenID].seller = payable(msg.sender);\\n        s_marketItems[tokenID].forSale = true;\\n\\n        // front-end will approve spending of s_marketplaceFee NEL tokens\\n\\n        // complete the listing transaction\\n        NEL_CONTRACT.transferFrom(msg.sender, owner(), s_marketplaceFee);\\n        _transfer(msg.sender, address(this), tokenID);\\n        emit MarketItemListed(tokenID, msg.sender, salePrice);\\n    }\\n\\n    function delistNFT(uint256 tokenID) external {\\n        require(\\n            msg.sender == s_marketItems[tokenID].seller,\\n            \\\"You cannot delist an NFT that you are not the seller of.\\\"\\n        );\\n        // use the bool in the MarketItem to effectively delist the item from sale\\n        s_marketItems[tokenID].forSale = false;\\n\\n        // seller forfeits marketplace fee\\n\\n        // complete delisting transaction\\n        _transfer(address(this), msg.sender, tokenID);\\n        emit MarketItemDelisted(tokenID, msg.sender);\\n    }\\n\\n    function getAllNFTsForSale() external view returns (MarketItem[] memory) {\\n        uint256 numNFTsForSale = balanceOf(address(this));\\n        MarketItem[] memory NFTsForSale = new MarketItem[](numNFTsForSale);\\n\\n        // look through s_marketItems and find those MarketItems for which forSale == true\\n        uint256 currentIndex;\\n        for (uint256 i = 0; i < s_marketItems.length; i++) {\\n            if (s_marketItems[i].forSale) {\\n                NFTsForSale[currentIndex] = s_marketItems[i];\\n                currentIndex++;\\n            }\\n        }\\n\\n        return NFTsForSale;\\n    }\\n    //\\n}\\n\",\"keccak256\":\"0x44de3cfcd890c9980b0a121b6d87f434cf49eca8ade116240406d78eb1b28914\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101f95760003560e01c80636e02007d1161010d578063a22cb465116100a0578063de58048c1161006f578063de58048c14610740578063e985e9c51461076b578063f2fde38b146107a8578063f47c84c5146107d1578063f8ddbb6c146107fc576101f9565b8063a22cb46514610688578063b88d4fde146106b1578063c87b56dd146106da578063cb917b9c14610717576101f9565b8063838e8e73116100dc578063838e8e73146105eb5780638da5cb5b1461061657806391a48a1e1461064157806395d89b411461065d576101f9565b80636e02007d1461054357806370a082311461056e578063715018a6146105ab578063720d09cd146105c2576101f9565b806330eb80cd116101905780634f6ccce71161015f5780634f6ccce7146104575780634fe5baac1461049457806351ed8288146104bf578063629cb2e4146104db5780636352211e14610506576101f9565b806330eb80cd146103885780633bb3a24d146103b1578063408428eb146103ee57806342842e0e1461042e576101f9565b806318160ddd116101cc57806318160ddd146102cc57806323b872dd146102f757806326a7b37b146103205780632f745c591461034b576101f9565b806301ffc9a7146101fe57806306fdde031461023b578063081812fc14610266578063095ea7b3146102a3575b600080fd5b34801561020a57600080fd5b5061022560048036038101906102209190612e24565b610827565b6040516102329190612e6c565b60405180910390f35b34801561024757600080fd5b50610250610839565b60405161025d9190612f17565b60405180910390f35b34801561027257600080fd5b5061028d60048036038101906102889190612f6f565b6108cb565b60405161029a9190612fdd565b60405180910390f35b3480156102af57600080fd5b506102ca60048036038101906102c59190613024565b610911565b005b3480156102d857600080fd5b506102e1610a28565b6040516102ee9190613073565b60405180910390f35b34801561030357600080fd5b5061031e6004803603810190610319919061308e565b610a35565b005b34801561032c57600080fd5b50610335610a95565b6040516103429190613073565b60405180910390f35b34801561035757600080fd5b50610372600480360381019061036d9190613024565b610a9f565b60405161037f9190613073565b60405180910390f35b34801561039457600080fd5b506103af60048036038101906103aa9190612f6f565b610b44565b005b3480156103bd57600080fd5b506103d860048036038101906103d39190612f6f565b610b56565b6040516103e59190612f17565b60405180910390f35b3480156103fa57600080fd5b5061041560048036038101906104109190612f6f565b610c57565b6040516104259493929190613102565b60405180910390f35b34801561043a57600080fd5b506104556004803603810190610450919061308e565b610cc4565b005b34801561046357600080fd5b5061047e60048036038101906104799190612f6f565b610ce4565b60405161048b9190613073565b60405180910390f35b3480156104a057600080fd5b506104a9610d55565b6040516104b691906131a6565b60405180910390f35b6104d960048036038101906104d49190612f6f565b610d7b565b005b3480156104e757600080fd5b506104f0611026565b6040516104fd919061327f565b60405180910390f35b34801561051257600080fd5b5061052d60048036038101906105289190612f6f565b6110d2565b60405161053a9190612fdd565b60405180910390f35b34801561054f57600080fd5b50610558611158565b6040516105659190613073565b60405180910390f35b34801561057a57600080fd5b50610595600480360381019061059091906132a1565b611162565b6040516105a29190613073565b60405180910390f35b3480156105b757600080fd5b506105c0611219565b005b3480156105ce57600080fd5b506105e960048036038101906105e491906132a1565b61122d565b005b3480156105f757600080fd5b50610600611279565b60405161060d9190613073565b60405180910390f35b34801561062257600080fd5b5061062b61127f565b6040516106389190612fdd565b60405180910390f35b61065b600480360381019061065691906132ce565b6112a9565b005b34801561066957600080fd5b506106726114c2565b60405161067f9190612f17565b60405180910390f35b34801561069457600080fd5b506106af60048036038101906106aa919061333a565b611554565b005b3480156106bd57600080fd5b506106d860048036038101906106d391906134af565b61156a565b005b3480156106e657600080fd5b5061070160048036038101906106fc9190612f6f565b6115cc565b60405161070e9190612f17565b60405180910390f35b34801561072357600080fd5b5061073e60048036038101906107399190612f6f565b6115de565b005b34801561074c57600080fd5b50610755611721565b6040516107629190613654565b60405180910390f35b34801561077757600080fd5b50610792600480360381019061078d9190613676565b6118d1565b60405161079f9190612e6c565b60405180910390f35b3480156107b457600080fd5b506107cf60048036038101906107ca91906132a1565b611965565b005b3480156107dd57600080fd5b506107e66119e8565b6040516107f39190613073565b60405180910390f35b34801561080857600080fd5b506108116119ed565b60405161081e9190612e6c565b60405180910390f35b600061083282611b3e565b9050919050565b606060008054610848906136e5565b80601f0160208091040260200160405190810160405280929190818152602001828054610874906136e5565b80156108c15780601f10610896576101008083540402835291602001916108c1565b820191906000526020600020905b8154815290600101906020018083116108a457829003601f168201915b5050505050905090565b60006108d682611bb8565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061091c826110d2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361098c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098390613788565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109ab611c03565b73ffffffffffffffffffffffffffffffffffffffff1614806109da57506109d9816109d4611c03565b6118d1565b5b610a19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a109061381a565b60405180910390fd5b610a238383611c0b565b505050565b6000600880549050905090565b610a46610a40611c03565b82611cc4565b610a85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7c906138ac565b60405180910390fd5b610a90838383611d59565b505050565b6000601054905090565b6000610aaa83611162565b8210610aeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae29061393e565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610b4c61204e565b8060108190555050565b606060008210158015610b6a5750600f8211155b610ba9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba0906139d0565b60405180910390fd5b600e8281548110610bbd57610bbc6139f0565b5b906000526020600020018054610bd2906136e5565b80601f0160208091040260200160405190810160405280929190818152602001828054610bfe906136e5565b8015610c4b5780601f10610c2057610100808354040283529160200191610c4b565b820191906000526020600020905b815481529060010190602001808311610c2e57829003601f168201915b50505050509050919050565b600f8181548110610c6757600080fd5b90600052602060002090600402016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030160009054906101000a900460ff16905084565b610cdf8383836040518060200160405280600081525061156a565b505050565b6000610cee610a28565b8210610d2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2690613a91565b60405180910390fd5b60088281548110610d4357610d426139f0565b5b90600052602060002001549050919050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600f8281548110610d9157610d906139f0565b5b90600052602060002090600402016002015490506000600f8381548110610dbb57610dba6139f0565b5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610e5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5490613b6f565b60405180910390fd5b600f8381548110610e7157610e706139f0565b5b906000526020600020906004020160030160009054906101000a900460ff16610ecf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec690613c27565b60405180910390fd5b6000600f8481548110610ee557610ee46139f0565b5b906000526020600020906004020160030160006101000a81548160ff021916908315150217905550610f18303385611d59565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3383856040518463ffffffff1660e01b8152600401610f7793929190613c47565b6020604051808303816000875af1158015610f96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fba9190613c93565b503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16847fd356b8423ef89ccba8e4f1dbeccc60b41825fd97d432f2e6a6dbd11ae6ecec11856040516110199190613073565b60405180910390a4505050565b6060600061103333611162565b905060008167ffffffffffffffff81111561105157611050613384565b5b60405190808252806020026020018201604052801561107f5781602001602082028036833780820191505090505b50905060005b828110156110c9576110973382610a9f565b8282815181106110aa576110a96139f0565b5b60200260200101818152505080806110c190613cef565b915050611085565b50809250505090565b6000806110de836120cc565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361114f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114690613d83565b60405180910390fd5b80915050919050565b6000600d54905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036111d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c990613e15565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61122161204e565b61122b6000612109565b565b61123561204e565b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60105481565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081116112ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e390613ecd565b60405180910390fd5b80600f8381548110611301576113006139f0565b5b90600052602060002090600402016002018190555033600f838154811061132b5761132a6139f0565b5b906000526020600020906004020160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600f83815481106113905761138f6139f0565b5b906000526020600020906004020160030160006101000a81548160ff021916908315150217905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd336113ff61127f565b6010546040518463ffffffff1660e01b815260040161142093929190613c47565b6020604051808303816000875af115801561143f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114639190613c93565b5061146f333084611d59565b3373ffffffffffffffffffffffffffffffffffffffff16827f39b39e4f00d78ef7831c097359a918101fb766dc7144d5fcf5776cd52a67a1ec836040516114b69190613073565b60405180910390a35050565b6060600180546114d1906136e5565b80601f01602080910402602001604051908101604052809291908181526020018280546114fd906136e5565b801561154a5780601f1061151f5761010080835404028352916020019161154a565b820191906000526020600020905b81548152906001019060200180831161152d57829003601f168201915b5050505050905090565b61156661155f611c03565b83836121cf565b5050565b61157b611575611c03565b83611cc4565b6115ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b1906138ac565b60405180910390fd5b6115c68484848461233b565b50505050565b60606115d782612397565b9050919050565b600f81815481106115f2576115f16139f0565b5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611691576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168890613f5f565b60405180910390fd5b6000600f82815481106116a7576116a66139f0565b5b906000526020600020906004020160030160006101000a81548160ff0219169083151502179055506116da303383611d59565b3373ffffffffffffffffffffffffffffffffffffffff16817fd179260feb48601b2a9fe6f31b78a43d7c7cb8b58e9f482cdc20ad784fe989af60405160405180910390a350565b6060600061172e30611162565b905060008167ffffffffffffffff81111561174c5761174b613384565b5b60405190808252806020026020018201604052801561178557816020015b611772612d78565b81526020019060019003908161176a5790505b509050600080600090505b600f805490508110156118c757600f81815481106117b1576117b06139f0565b5b906000526020600020906004020160030160009054906101000a900460ff16156118b457600f81815481106117e9576117e86139f0565b5b9060005260206000209060040201604051806080016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900460ff16151515158152505083838151811061189a576118996139f0565b5b602002602001018190525081806118b090613cef565b9250505b80806118bf90613cef565b915050611790565b5081935050505090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61196d61204e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036119dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d390613ff1565b60405180910390fd5b6119e581612109565b50565b601081565b6000600c60149054906101000a900460ff16905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b611a32838383611b39565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611a7457611a6f816124a9565b611ab3565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611ab257611ab183826124f2565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611af557611af08161265f565b611b34565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611b3357611b328282612730565b5b5b505050565b505050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611bb15750611bb0826127af565b5b9050919050565b611bc181612891565b611c00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf790613d83565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611c7e836110d2565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611cd0836110d2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611d125750611d1181856118d1565b5b80611d5057508373ffffffffffffffffffffffffffffffffffffffff16611d38846108cb565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611d79826110d2565b73ffffffffffffffffffffffffffffffffffffffff1614611dcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc690614083565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3590614115565b60405180910390fd5b611e498383836128d2565b8273ffffffffffffffffffffffffffffffffffffffff16611e69826110d2565b73ffffffffffffffffffffffffffffffffffffffff1614611ebf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb690614083565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46120498383836128e2565b505050565b612056611c03565b73ffffffffffffffffffffffffffffffffffffffff1661207461127f565b73ffffffffffffffffffffffffffffffffffffffff16146120ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c190614181565b60405180910390fd5b565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361223d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612234906141ed565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161232e9190612e6c565b60405180910390a3505050565b612346848484611d59565b612352848484846128e7565b612391576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123889061427f565b60405180910390fd5b50505050565b60606123a282611bb8565b6000600a600084815260200190815260200160002080546123c2906136e5565b80601f01602080910402602001604051908101604052809291908181526020018280546123ee906136e5565b801561243b5780601f106124105761010080835404028352916020019161243b565b820191906000526020600020905b81548152906001019060200180831161241e57829003601f168201915b50505050509050600061244c612a6e565b905060008151036124615781925050506124a4565b60008251111561249657808260405160200161247e9291906142db565b604051602081830303815290604052925050506124a4565b61249f84612a85565b925050505b919050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016124ff84611162565b61250991906142ff565b90506000600760008481526020019081526020016000205490508181146125ee576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160088054905061267391906142ff565b90506000600960008481526020019081526020016000205490506000600883815481106126a3576126a26139f0565b5b9060005260206000200154905080600883815481106126c5576126c46139f0565b5b90600052602060002001819055508160096000838152602001908152602001600020819055506009600085815260200190815260200160002060009055600880548061271457612713614333565b5b6001900381819060005260206000200160009055905550505050565b600061273b83611162565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061287a57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061288a575061288982612aed565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166128b3836120cc565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6128dd838383611a27565b505050565b505050565b60006129088473ffffffffffffffffffffffffffffffffffffffff16611a04565b15612a61578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612931611c03565b8786866040518563ffffffff1660e01b815260040161295394939291906143b7565b6020604051808303816000875af192505050801561298f57506040513d601f19601f8201168201806040525081019061298c9190614418565b60015b612a11573d80600081146129bf576040519150601f19603f3d011682016040523d82523d6000602084013e6129c4565b606091505b506000815103612a09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a009061427f565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612a66565b600190505b949350505050565b606060405180602001604052806000815250905090565b6060612a9082611bb8565b6000612a9a612a6e565b90506000815111612aba5760405180602001604052806000815250612ae5565b80612ac484612b57565b604051602001612ad59291906142db565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b606060006001612b6684612c25565b01905060008167ffffffffffffffff811115612b8557612b84613384565b5b6040519080825280601f01601f191660200182016040528015612bb75781602001600182028036833780820191505090505b509050600082602001820190505b600115612c1a578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612c0e57612c0d614445565b5b04945060008503612bc5575b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612c83577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612c7957612c78614445565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612cc0576d04ee2d6d415b85acef81000000008381612cb657612cb5614445565b5b0492506020810190505b662386f26fc100008310612cef57662386f26fc100008381612ce557612ce4614445565b5b0492506010810190505b6305f5e1008310612d18576305f5e1008381612d0e57612d0d614445565b5b0492506008810190505b6127108310612d3d576127108381612d3357612d32614445565b5b0492506004810190505b60648310612d605760648381612d5657612d55614445565b5b0492506002810190505b600a8310612d6f576001810190505b80915050919050565b604051806080016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612e0181612dcc565b8114612e0c57600080fd5b50565b600081359050612e1e81612df8565b92915050565b600060208284031215612e3a57612e39612dc2565b5b6000612e4884828501612e0f565b91505092915050565b60008115159050919050565b612e6681612e51565b82525050565b6000602082019050612e816000830184612e5d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612ec1578082015181840152602081019050612ea6565b60008484015250505050565b6000601f19601f8301169050919050565b6000612ee982612e87565b612ef38185612e92565b9350612f03818560208601612ea3565b612f0c81612ecd565b840191505092915050565b60006020820190508181036000830152612f318184612ede565b905092915050565b6000819050919050565b612f4c81612f39565b8114612f5757600080fd5b50565b600081359050612f6981612f43565b92915050565b600060208284031215612f8557612f84612dc2565b5b6000612f9384828501612f5a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612fc782612f9c565b9050919050565b612fd781612fbc565b82525050565b6000602082019050612ff26000830184612fce565b92915050565b61300181612fbc565b811461300c57600080fd5b50565b60008135905061301e81612ff8565b92915050565b6000806040838503121561303b5761303a612dc2565b5b60006130498582860161300f565b925050602061305a85828601612f5a565b9150509250929050565b61306d81612f39565b82525050565b60006020820190506130886000830184613064565b92915050565b6000806000606084860312156130a7576130a6612dc2565b5b60006130b58682870161300f565b93505060206130c68682870161300f565b92505060406130d786828701612f5a565b9150509250925092565b60006130ec82612f9c565b9050919050565b6130fc816130e1565b82525050565b60006080820190506131176000830187613064565b61312460208301866130f3565b6131316040830185613064565b61313e6060830184612e5d565b95945050505050565b6000819050919050565b600061316c61316761316284612f9c565b613147565b612f9c565b9050919050565b600061317e82613151565b9050919050565b600061319082613173565b9050919050565b6131a081613185565b82525050565b60006020820190506131bb6000830184613197565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6131f681612f39565b82525050565b600061320883836131ed565b60208301905092915050565b6000602082019050919050565b600061322c826131c1565b61323681856131cc565b9350613241836131dd565b8060005b8381101561327257815161325988826131fc565b975061326483613214565b925050600181019050613245565b5085935050505092915050565b600060208201905081810360008301526132998184613221565b905092915050565b6000602082840312156132b7576132b6612dc2565b5b60006132c58482850161300f565b91505092915050565b600080604083850312156132e5576132e4612dc2565b5b60006132f385828601612f5a565b925050602061330485828601612f5a565b9150509250929050565b61331781612e51565b811461332257600080fd5b50565b6000813590506133348161330e565b92915050565b6000806040838503121561335157613350612dc2565b5b600061335f8582860161300f565b925050602061337085828601613325565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6133bc82612ecd565b810181811067ffffffffffffffff821117156133db576133da613384565b5b80604052505050565b60006133ee612db8565b90506133fa82826133b3565b919050565b600067ffffffffffffffff82111561341a57613419613384565b5b61342382612ecd565b9050602081019050919050565b82818337600083830152505050565b600061345261344d846133ff565b6133e4565b90508281526020810184848401111561346e5761346d61337f565b5b613479848285613430565b509392505050565b600082601f8301126134965761349561337a565b5b81356134a684826020860161343f565b91505092915050565b600080600080608085870312156134c9576134c8612dc2565b5b60006134d78782880161300f565b94505060206134e88782880161300f565b93505060406134f987828801612f5a565b925050606085013567ffffffffffffffff81111561351a57613519612dc7565b5b61352687828801613481565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613567816130e1565b82525050565b61357681612e51565b82525050565b60808201600082015161359260008501826131ed565b5060208201516135a5602085018261355e565b5060408201516135b860408501826131ed565b5060608201516135cb606085018261356d565b50505050565b60006135dd838361357c565b60808301905092915050565b6000602082019050919050565b600061360182613532565b61360b818561353d565b93506136168361354e565b8060005b8381101561364757815161362e88826135d1565b9750613639836135e9565b92505060018101905061361a565b5085935050505092915050565b6000602082019050818103600083015261366e81846135f6565b905092915050565b6000806040838503121561368d5761368c612dc2565b5b600061369b8582860161300f565b92505060206136ac8582860161300f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806136fd57607f821691505b6020821081036137105761370f6136b6565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613772602183612e92565b915061377d82613716565b604082019050919050565b600060208201905081810360008301526137a181613765565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000613804603d83612e92565b915061380f826137a8565b604082019050919050565b60006020820190508181036000830152613833816137f7565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000613896602d83612e92565b91506138a18261383a565b604082019050919050565b600060208201905081810360008301526138c581613889565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000613928602b83612e92565b9150613933826138cc565b604082019050919050565b600060208201905081810360008301526139578161391b565b9050919050565b7f52657175657374656420746f6b656e2055524920696e646578206e6f7420776960008201527f7468696e20626f756e64732e0000000000000000000000000000000000000000602082015250565b60006139ba602c83612e92565b91506139c58261395e565b604082019050919050565b600060208201905081810360008301526139e9816139ad565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000613a7b602c83612e92565b9150613a8682613a1f565b604082019050919050565b60006020820190508181036000830152613aaa81613a6e565b9050919050565b7f596f752063616e6e6f7420707572636861736520746865204e4654207468617460008201527f20796f7520616c7265616479206f776e656420616e642068617665206c69737460208201527f65642e20496e73746561642c2064656c69737420746865204e46542066726f6d60408201527f20746865206d61726b6574706c6163652e000000000000000000000000000000606082015250565b6000613b59607183612e92565b9150613b6482613ab1565b608082019050919050565b60006020820190508181036000830152613b8881613b4c565b9050919050565b7f54686973206974656d206973206e6f7420666f722073616c652e20486f77206460008201527f696420796f75206d616e61676520746f2074727920616e64207075726368617360208201527f652069743f000000000000000000000000000000000000000000000000000000604082015250565b6000613c11604583612e92565b9150613c1c82613b8f565b606082019050919050565b60006020820190508181036000830152613c4081613c04565b9050919050565b6000606082019050613c5c6000830186612fce565b613c696020830185612fce565b613c766040830184613064565b949350505050565b600081519050613c8d8161330e565b92915050565b600060208284031215613ca957613ca8612dc2565b5b6000613cb784828501613c7e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613cfa82612f39565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613d2c57613d2b613cc0565b5b600182019050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000613d6d601883612e92565b9150613d7882613d37565b602082019050919050565b60006020820190508181036000830152613d9c81613d60565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613dff602983612e92565b9150613e0a82613da3565b604082019050919050565b60006020820190508181036000830152613e2e81613df2565b9050919050565b7f596f752063616e6e6f74206c69737420796f7572204e465420666f722061207060008201527f72696365206c657373207468616e207a65726f2e20506c65617365207365742060208201527f612070726963652067726561746572207468616e207a65726f2e000000000000604082015250565b6000613eb7605a83612e92565b9150613ec282613e35565b606082019050919050565b60006020820190508181036000830152613ee681613eaa565b9050919050565b7f596f752063616e6e6f742064656c69737420616e204e4654207468617420796f60008201527f7520617265206e6f74207468652073656c6c6572206f662e0000000000000000602082015250565b6000613f49603883612e92565b9150613f5482613eed565b604082019050919050565b60006020820190508181036000830152613f7881613f3c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613fdb602683612e92565b9150613fe682613f7f565b604082019050919050565b6000602082019050818103600083015261400a81613fce565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061406d602583612e92565b915061407882614011565b604082019050919050565b6000602082019050818103600083015261409c81614060565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006140ff602483612e92565b915061410a826140a3565b604082019050919050565b6000602082019050818103600083015261412e816140f2565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061416b602083612e92565b915061417682614135565b602082019050919050565b6000602082019050818103600083015261419a8161415e565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006141d7601983612e92565b91506141e2826141a1565b602082019050919050565b60006020820190508181036000830152614206816141ca565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614269603283612e92565b91506142748261420d565b604082019050919050565b600060208201905081810360008301526142988161425c565b9050919050565b600081905092915050565b60006142b582612e87565b6142bf818561429f565b93506142cf818560208601612ea3565b80840191505092915050565b60006142e782856142aa565b91506142f382846142aa565b91508190509392505050565b600061430a82612f39565b915061431583612f39565b925082820390508181111561432d5761432c613cc0565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600081519050919050565b600082825260208201905092915050565b600061438982614362565b614393818561436d565b93506143a3818560208601612ea3565b6143ac81612ecd565b840191505092915050565b60006080820190506143cc6000830187612fce565b6143d96020830186612fce565b6143e66040830185613064565b81810360608301526143f8818461437e565b905095945050505050565b60008151905061441281612df8565b92915050565b60006020828403121561442e5761442d612dc2565b5b600061443c84828501614403565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea264697066735822122030966e51ec8580aafc3a5a54dc506afaadeea938922b454333c75278c829f7da64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 216,
        "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 218,
        "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 222,
        "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 226,
        "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 230,
        "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 236,
        "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1295,
        "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1299,
        "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1302,
        "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1306,
        "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1654,
        "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
        "label": "_owner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 3269,
        "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
        "label": "NEL_CONTRACT",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20)190"
      },
      {
        "astId": 3271,
        "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
        "label": "s_isInitialised",
        "offset": 20,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 3276,
        "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
        "label": "s_tokenCounter",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3279,
        "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
        "label": "s_tokenURIs",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 3292,
        "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
        "label": "s_marketItems",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_struct(MarketItem)3288_storage)dyn_storage"
      },
      {
        "astId": 3294,
        "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
        "label": "s_marketplaceFee",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(MarketItem)3288_storage)dyn_storage": {
        "base": "t_struct(MarketItem)3288_storage",
        "encoding": "dynamic_array",
        "label": "struct RadioDAONFT.MarketItem[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)190": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MarketItem)3288_storage": {
        "encoding": "inplace",
        "label": "struct RadioDAONFT.MarketItem",
        "members": [
          {
            "astId": 3281,
            "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
            "label": "tokenID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3283,
            "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 3285,
            "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3287,
            "contract": "contracts/RadioDAONFT.sol:RadioDAONFT",
            "label": "forSale",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
